{"ast":null,"code":"/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\nclass Rule {\n  constructor(params) {\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter(d => d === val).length;\n  }\n\n}\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\n\n\nclass TotalOneNumber extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      return this.val * this.count(dice, this.val);\n    };\n  }\n\n}\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\n\n\nclass SumDistro extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      // do any of the counts meet of exceed this distro?\n      return this.freq(dice).some(c => c >= this.count) ? this.sum(dice) : 0;\n    };\n  }\n\n}\n/** Check if full house (3-of-kind and 2-of-kind) */\n\n\nclass FullHouse extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      const freqs = this.freq(dice);\n\n      if (freqs.includes(2) && freqs.includes(3)) {\n        return this.score;\n      }\n\n      return 0;\n    };\n  }\n\n}\n/** Check for small straights. */\n\n\nclass SmallStraight extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      const d = new Set(dice); // small straight must be 4 different dice & only one can be a 1,2 or a 5,6\n\n      return d.size === 4 && (!d.has(1) || !d.has(6)) || !d.has(5) || !d.has(2) ? this.score : 0;\n    };\n  }\n\n}\n/** Check for large straights. */\n\n\nclass LargeStraight extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      const d = new Set(dice); // large straight must be 5 different dice & only one can be a 1 or a 6\n\n      return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n    };\n  }\n\n}\n/** Check if all dice are same. */\n\n\nclass Yahtzee extends Rule {\n  constructor() {\n    super(...arguments);\n\n    this.evalRoll = dice => {\n      // all dice must be the same\n      return this.freq(dice)[0] === 5 ? this.score : 0;\n    };\n  }\n\n} // ones, twos, etc score as sum of that value\n\n\nconst ones = new TotalOneNumber({\n  val: 1,\n  description: \"1 point per 1\"\n});\nconst twos = new TotalOneNumber({\n  val: 2,\n  description: \"2 point per 2\"\n});\nconst threes = new TotalOneNumber({\n  val: 3,\n  description: \"3 point per 3\"\n});\nconst fours = new TotalOneNumber({\n  val: 4,\n  description: \"4 point per 4\"\n});\nconst fives = new TotalOneNumber({\n  val: 5,\n  description: \"5 point per 5\"\n});\nconst sixes = new TotalOneNumber({\n  val: 6,\n  description: \"6 point per 6\"\n}); // three/four of kind score as sum of all dice\n\nconst threeOfKind = new SumDistro({\n  count: 3,\n  description: \"sum, when 3 same dices\"\n});\nconst fourOfKind = new SumDistro({\n  count: 4,\n  description: \"sum, when 4 same dices\"\n}); // full house scores as flat 25\n\nconst fullHouse = new FullHouse({\n  score: 25,\n  description: \"25, when 3 and 2 same dices\"\n}); // small/large straights score as 30/40\n\nconst smallStraight = new SmallStraight({\n  score: 30,\n  description: \"30, 4 dices in a row\"\n});\nconst largeStraight = new LargeStraight({\n  score: 40,\n  description: \"40, 5 dices in a row\"\n}); // yahtzee scores as 50\n\nconst yahtzee = new Yahtzee({\n  score: 50,\n  description: \"50, 5 times the same dice\"\n}); // for chance, can view as some of all dice, requiring at least 0 of a kind\n\nconst chance = new SumDistro({\n  count: 0,\n  description: \"sum of all dices\"\n});\nexport { ones, twos, threes, fours, fives, sixes, threeOfKind, fourOfKind, fullHouse, smallStraight, largeStraight, yahtzee, chance };","map":{"version":3,"sources":["/Users/charlesouverleaux/code/CharlesOuverleaux/yahtzee/src/components/Rules.js"],"names":["Rule","constructor","params","Object","assign","sum","dice","reduce","prev","curr","freq","freqs","Map","d","set","get","Array","from","values","count","val","filter","length","TotalOneNumber","evalRoll","SumDistro","some","c","FullHouse","includes","score","SmallStraight","Set","size","has","LargeStraight","Yahtzee","ones","description","twos","threes","fours","fives","sixes","threeOfKind","fourOfKind","fullHouse","smallStraight","largeStraight","yahtzee","chance"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,MAAMA,IAAN,CAAW;AACTC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB;AACAC,IAAAA,MAAM,CAACC,MAAP,CAAc,IAAd,EAAoBF,MAApB;AACD;;AAEDG,EAAAA,GAAG,CAACC,IAAD,EAAO;AACR;AACA,WAAOA,IAAI,CAACC,MAAL,CAAY,CAACC,IAAD,EAAOC,IAAP,KAAgBD,IAAI,GAAGC,IAAnC,CAAP;AACD;;AAEDC,EAAAA,IAAI,CAACJ,IAAD,EAAO;AACT;AACA,UAAMK,KAAK,GAAG,IAAIC,GAAJ,EAAd;;AACA,SAAK,IAAIC,CAAT,IAAcP,IAAd,EAAoBK,KAAK,CAACG,GAAN,CAAUD,CAAV,EAAa,CAACF,KAAK,CAACI,GAAN,CAAUF,CAAV,KAAgB,CAAjB,IAAsB,CAAnC;;AACpB,WAAOG,KAAK,CAACC,IAAN,CAAWN,KAAK,CAACO,MAAN,EAAX,CAAP;AACD;;AAEDC,EAAAA,KAAK,CAACb,IAAD,EAAOc,GAAP,EAAY;AACf;AACA,WAAOd,IAAI,CAACe,MAAL,CAAYR,CAAC,IAAIA,CAAC,KAAKO,GAAvB,EAA4BE,MAAnC;AACD;;AArBQ;AAwBX;AACA;AACA;AACA;;;AAEA,MAAMC,cAAN,SAA6BvB,IAA7B,CAAkC;AAAA;AAAA;;AAAA,SAChCwB,QADgC,GACrBlB,IAAI,IAAI;AACjB,aAAO,KAAKc,GAAL,GAAW,KAAKD,KAAL,CAAWb,IAAX,EAAiB,KAAKc,GAAtB,CAAlB;AACD,KAH+B;AAAA;;AAAA;AAMlC;AACA;AACA;AACA;;;AAEA,MAAMK,SAAN,SAAwBzB,IAAxB,CAA6B;AAAA;AAAA;;AAAA,SAC3BwB,QAD2B,GAChBlB,IAAI,IAAI;AACjB;AACA,aAAO,KAAKI,IAAL,CAAUJ,IAAV,EAAgBoB,IAAhB,CAAqBC,CAAC,IAAIA,CAAC,IAAI,KAAKR,KAApC,IAA6C,KAAKd,GAAL,CAASC,IAAT,CAA7C,GAA8D,CAArE;AACD,KAJ0B;AAAA;;AAAA;AAO7B;;;AAEA,MAAMsB,SAAN,SAAwB5B,IAAxB,CAA6B;AAAA;AAAA;;AAAA,SAC3BwB,QAD2B,GAChBlB,IAAI,IAAI;AACjB,YAAMK,KAAK,GAAG,KAAKD,IAAL,CAAUJ,IAAV,CAAd;;AACA,UAAIK,KAAK,CAACkB,QAAN,CAAe,CAAf,KAAqBlB,KAAK,CAACkB,QAAN,CAAe,CAAf,CAAzB,EAA4C;AAC1C,eAAO,KAAKC,KAAZ;AACD;;AACD,aAAO,CAAP;AACD,KAP0B;AAAA;;AAAA;AAU7B;;;AAEA,MAAMC,aAAN,SAA4B/B,IAA5B,CAAiC;AAAA;AAAA;;AAAA,SAC/BwB,QAD+B,GACpBlB,IAAI,IAAI;AACjB,YAAMO,CAAC,GAAG,IAAImB,GAAJ,CAAQ1B,IAAR,CAAV,CADiB,CAGjB;;AACA,aAAOO,CAAC,CAACoB,IAAF,KAAW,CAAX,KAAiB,CAACpB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAAD,IAAa,CAACrB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAA/B,KAA4C,CAACrB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAA7C,IAAyD,CAACrB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAA1D,GAAoE,KAAKJ,KAAzE,GAAiF,CAAxF;AACD,KAN8B;AAAA;;AAAA;AAUjC;;;AAEA,MAAMK,aAAN,SAA4BnC,IAA5B,CAAiC;AAAA;AAAA;;AAAA,SAC/BwB,QAD+B,GACpBlB,IAAI,IAAI;AACjB,YAAMO,CAAC,GAAG,IAAImB,GAAJ,CAAQ1B,IAAR,CAAV,CADiB,CAGjB;;AACA,aAAOO,CAAC,CAACoB,IAAF,KAAW,CAAX,KAAiB,CAACpB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAAD,IAAa,CAACrB,CAAC,CAACqB,GAAF,CAAM,CAAN,CAA/B,IAA2C,KAAKJ,KAAhD,GAAwD,CAA/D;AACD,KAN8B;AAAA;;AAAA;AASjC;;;AAEA,MAAMM,OAAN,SAAsBpC,IAAtB,CAA2B;AAAA;AAAA;;AAAA,SACzBwB,QADyB,GACdlB,IAAI,IAAI;AACjB;AACA,aAAO,KAAKI,IAAL,CAAUJ,IAAV,EAAgB,CAAhB,MAAuB,CAAvB,GAA2B,KAAKwB,KAAhC,GAAwC,CAA/C;AACD,KAJwB;AAAA;;AAAA,C,CAO3B;;;AACA,MAAMO,IAAI,GAAG,IAAId,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAb;AACA,MAAMC,IAAI,GAAG,IAAIhB,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAb;AACA,MAAME,MAAM,GAAG,IAAIjB,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAf;AACA,MAAMG,KAAK,GAAG,IAAIlB,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAd;AACA,MAAMI,KAAK,GAAG,IAAInB,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAd;AACA,MAAMK,KAAK,GAAG,IAAIpB,cAAJ,CAAmB;AAAEH,EAAAA,GAAG,EAAE,CAAP;AAAUkB,EAAAA,WAAW,EAAE;AAAvB,CAAnB,CAAd,C,CAEA;;AACA,MAAMM,WAAW,GAAG,IAAInB,SAAJ,CAAc;AAAEN,EAAAA,KAAK,EAAE,CAAT;AAAYmB,EAAAA,WAAW,EAAE;AAAzB,CAAd,CAApB;AACA,MAAMO,UAAU,GAAG,IAAIpB,SAAJ,CAAc;AAAEN,EAAAA,KAAK,EAAE,CAAT;AAAYmB,EAAAA,WAAW,EAAE;AAAzB,CAAd,CAAnB,C,CAEA;;AACA,MAAMQ,SAAS,GAAG,IAAIlB,SAAJ,CAAc;AAAEE,EAAAA,KAAK,EAAE,EAAT;AAAaQ,EAAAA,WAAW,EAAC;AAAzB,CAAd,CAAlB,C,CAEA;;AACA,MAAMS,aAAa,GAAG,IAAIhB,aAAJ,CAAkB;AAAED,EAAAA,KAAK,EAAE,EAAT;AAAaQ,EAAAA,WAAW,EAAE;AAA1B,CAAlB,CAAtB;AACA,MAAMU,aAAa,GAAG,IAAIb,aAAJ,CAAkB;AAAEL,EAAAA,KAAK,EAAE,EAAT;AAAaQ,EAAAA,WAAW,EAAE;AAA1B,CAAlB,CAAtB,C,CAEA;;AACA,MAAMW,OAAO,GAAG,IAAIb,OAAJ,CAAY;AAAEN,EAAAA,KAAK,EAAE,EAAT;AAAaQ,EAAAA,WAAW,EAAE;AAA1B,CAAZ,CAAhB,C,CAEA;;AACA,MAAMY,MAAM,GAAG,IAAIzB,SAAJ,CAAc;AAAEN,EAAAA,KAAK,EAAE,CAAT;AAAYmB,EAAAA,WAAW,EAAE;AAAzB,CAAd,CAAf;AAEA,SACED,IADF,EAEEE,IAFF,EAGEC,MAHF,EAIEC,KAJF,EAKEC,KALF,EAMEC,KANF,EAOEC,WAPF,EAQEC,UARF,EASEC,SATF,EAUEC,aAVF,EAWEC,aAXF,EAYEC,OAZF,EAaEC,MAbF","sourcesContent":["/** Rule for Yahtzee scoring.\n *\n * This is an \"abstract class\"; the real rules are subclasses of these.\n * This stores all parameters passed into it as properties on the instance\n * (to simplify child classes so they don't need constructors of their own).\n *\n * It contains useful functions for summing, counting values, and counting\n * frequencies of dice. These are used by subclassed rules.\n */\n\nclass Rule {\n  constructor(params) {\n    // put all properties in params on instance\n    Object.assign(this, params);\n  }\n\n  sum(dice) {\n    // sum of all dice\n    return dice.reduce((prev, curr) => prev + curr);\n  }\n\n  freq(dice) {\n    // frequencies of dice values\n    const freqs = new Map();\n    for (let d of dice) freqs.set(d, (freqs.get(d) || 0) + 1);\n    return Array.from(freqs.values());\n  }\n\n  count(dice, val) {\n    // # times val appears in dice\n    return dice.filter(d => d === val).length;\n  }\n}\n\n/** Given a sought-for val, return sum of dice of that val.\n *\n * Used for rules like \"sum of all ones\"\n */\n\nclass TotalOneNumber extends Rule {\n  evalRoll = dice => {\n    return this.val * this.count(dice, this.val);\n  };\n}\n\n/** Given a required # of same dice, return sum of all dice.\n *\n * Used for rules like \"sum of all dice when there is a 3-of-kind\"\n */\n\nclass SumDistro extends Rule {\n  evalRoll = dice => {\n    // do any of the counts meet of exceed this distro?\n    return this.freq(dice).some(c => c >= this.count) ? this.sum(dice) : 0;\n  };\n}\n\n/** Check if full house (3-of-kind and 2-of-kind) */\n\nclass FullHouse extends Rule {\n  evalRoll = dice => {\n    const freqs = this.freq(dice);\n    if (freqs.includes(2) && freqs.includes(3)) {\n      return this.score;\n    }\n    return 0\n  };\n}\n\n/** Check for small straights. */\n\nclass SmallStraight extends Rule {\n  evalRoll = dice => {\n    const d = new Set(dice);\n\n    // small straight must be 4 different dice & only one can be a 1,2 or a 5,6\n    return d.size === 4 && (!d.has(1) || !d.has(6)) || !d.has(5) || !d.has(2)? this.score : 0;\n  };\n\n}\n\n/** Check for large straights. */\n\nclass LargeStraight extends Rule {\n  evalRoll = dice => {\n    const d = new Set(dice);\n\n    // large straight must be 5 different dice & only one can be a 1 or a 6\n    return d.size === 5 && (!d.has(1) || !d.has(6)) ? this.score : 0;\n  };\n}\n\n/** Check if all dice are same. */\n\nclass Yahtzee extends Rule {\n  evalRoll = dice => {\n    // all dice must be the same\n    return this.freq(dice)[0] === 5 ? this.score : 0;\n  };\n}\n\n// ones, twos, etc score as sum of that value\nconst ones = new TotalOneNumber({ val: 1, description: \"1 point per 1\" });\nconst twos = new TotalOneNumber({ val: 2, description: \"2 point per 2\" });\nconst threes = new TotalOneNumber({ val: 3, description: \"3 point per 3\" });\nconst fours = new TotalOneNumber({ val: 4, description: \"4 point per 4\" });\nconst fives = new TotalOneNumber({ val: 5, description: \"5 point per 5\" });\nconst sixes = new TotalOneNumber({ val: 6, description: \"6 point per 6\" });\n\n// three/four of kind score as sum of all dice\nconst threeOfKind = new SumDistro({ count: 3, description: \"sum, when 3 same dices\"});\nconst fourOfKind = new SumDistro({ count: 4, description: \"sum, when 4 same dices\"});\n\n// full house scores as flat 25\nconst fullHouse = new FullHouse({ score: 25, description:\"25, when 3 and 2 same dices\"});\n\n// small/large straights score as 30/40\nconst smallStraight = new SmallStraight({ score: 30, description: \"30, 4 dices in a row\"});\nconst largeStraight = new LargeStraight({ score: 40, description: \"40, 5 dices in a row\"});\n\n// yahtzee scores as 50\nconst yahtzee = new Yahtzee({ score: 50, description: \"50, 5 times the same dice\"});\n\n// for chance, can view as some of all dice, requiring at least 0 of a kind\nconst chance = new SumDistro({ count: 0, description: \"sum of all dices\"});\n\nexport {\n  ones,\n  twos,\n  threes,\n  fours,\n  fives,\n  sixes,\n  threeOfKind,\n  fourOfKind,\n  fullHouse,\n  smallStraight,\n  largeStraight,\n  yahtzee,\n  chance\n};\n"]},"metadata":{},"sourceType":"module"}