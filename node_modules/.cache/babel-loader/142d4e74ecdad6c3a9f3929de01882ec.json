{"ast":null,"code":"var _jsxFileName = \"/Users/charlesouverleaux/code/CharlesOuverleaux/yahtzee/src/Game.js\";\nimport React, { Component } from \"react\";\nimport Dice from \"./Dice\";\nimport ScoreTable from \"./ScoreTable\";\nimport \"./Game.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst NUM_DICE = 5;\nconst NUM_ROLLS = 3;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dice: Array.from({\n        length: NUM_DICE\n      }),\n      locked: Array(NUM_DICE).fill(false),\n      rollsLeft: NUM_ROLLS,\n      scores: {\n        ones: undefined,\n        twos: undefined,\n        threes: undefined,\n        fours: undefined,\n        fives: undefined,\n        sixes: undefined,\n        threeOfKind: undefined,\n        fourOfKind: undefined,\n        fullHouse: undefined,\n        smallStraight: undefined,\n        largeStraight: undefined,\n        yahtzee: undefined,\n        chance: undefined\n      },\n      rolling: false\n    };\n    this.roll = this.roll.bind(this);\n    this.doScore = this.doScore.bind(this);\n    this.toggleLocked = this.toggleLocked.bind(this);\n  }\n\n  roll(evt) {\n    // roll dice whose indexes are in reroll\n    this.setState(st => ({\n      dice: st.dice.map((d, i) => st.locked[i] ? d : Math.ceil(Math.random() * 6)),\n      locked: st.rollsLeft > 1 ? st.locked : Array(NUM_DICE).fill(true),\n      rollsLeft: st.rollsLeft - 1,\n      shaking: true\n    }));\n    setTimeout(() => {\n      this.setState({\n        shaking: false\n      });\n    }, 1000);\n  }\n\n  toggleLocked(idx) {\n    // toggle whether idx is in locked or not\n    // if we dont have rolls left, it is not allowed to toggle anymore\n    if (this.state.rollsLeft > 0) {\n      this.setState(st => ({\n        locked: [...st.locked.slice(0, idx), !st.locked[idx], ...st.locked.slice(idx + 1)]\n      }));\n    }\n  }\n\n  doScore(rulename, ruleFn) {\n    // evaluate this ruleFn with the dice and score this rulename\n    this.setState(st => ({\n      scores: { ...st.scores,\n        [rulename]: ruleFn(this.state.dice)\n      },\n      rollsLeft: NUM_ROLLS,\n      locked: Array(NUM_DICE).fill(false)\n    }));\n    this.roll();\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Game\",\n      children: [/*#__PURE__*/_jsxDEV(\"header\", {\n        className: \"Game-header\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          className: \"App-title\",\n          children: \"Yahtzee!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n          className: \"Game-dice-section\",\n          children: [/*#__PURE__*/_jsxDEV(Dice, {\n            dice: this.state.dice,\n            locked: this.state.locked,\n            handleClick: this.toggleLocked,\n            rolling: this.state.shaking\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"Game-button-wrapper\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              className: \"Game-reroll\",\n              disabled: this.state.locked.every(x => x) || this.state.rollsLeft === 0,\n              onClick: this.roll,\n              children: [this.state.rollsLeft, \" Rerolls Left\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 90,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 80,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ScoreTable, {\n        doScore: this.doScore,\n        scores: this.state.scores\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nexport default Game;","map":{"version":3,"sources":["/Users/charlesouverleaux/code/CharlesOuverleaux/yahtzee/src/Game.js"],"names":["React","Component","Dice","ScoreTable","NUM_DICE","NUM_ROLLS","Game","constructor","props","state","dice","Array","from","length","locked","fill","rollsLeft","scores","ones","undefined","twos","threes","fours","fives","sixes","threeOfKind","fourOfKind","fullHouse","smallStraight","largeStraight","yahtzee","chance","rolling","roll","bind","doScore","toggleLocked","evt","setState","st","map","d","i","Math","ceil","random","shaking","setTimeout","idx","slice","rulename","ruleFn","render","every","x"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Dice from \"./Dice\";\nimport ScoreTable from \"./ScoreTable\";\nimport \"./Game.css\";\n\nconst NUM_DICE = 5;\nconst NUM_ROLLS = 3;\n\nclass Game extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      dice: Array.from({ length: NUM_DICE }),\n      locked: Array(NUM_DICE).fill(false),\n      rollsLeft: NUM_ROLLS,\n      scores: {\n        ones: undefined,\n        twos: undefined,\n        threes: undefined,\n        fours: undefined,\n        fives: undefined,\n        sixes: undefined,\n        threeOfKind: undefined,\n        fourOfKind: undefined,\n        fullHouse: undefined,\n        smallStraight: undefined,\n        largeStraight: undefined,\n        yahtzee: undefined,\n        chance: undefined\n      },\n      rolling: false\n    };\n    this.roll = this.roll.bind(this);\n    this.doScore = this.doScore.bind(this);\n    this.toggleLocked = this.toggleLocked.bind(this);\n  }\n\n  roll(evt) {\n    // roll dice whose indexes are in reroll\n    this.setState(st => ({\n      dice: st.dice.map((d, i) =>\n        st.locked[i] ? d : Math.ceil(Math.random() * 6)\n      ),\n      locked: st.rollsLeft > 1 ? st.locked : Array(NUM_DICE).fill(true),\n      rollsLeft: st.rollsLeft - 1,\n      shaking: true\n    }));\n    setTimeout(() => {\n      this.setState({ shaking: false })\n    }, 1000);\n  }\n\n  toggleLocked(idx) {\n    // toggle whether idx is in locked or not\n    // if we dont have rolls left, it is not allowed to toggle anymore\n    if (this.state.rollsLeft > 0) {\n      this.setState(st => ({\n        locked: [\n          ...st.locked.slice(0, idx),\n          !st.locked[idx],\n          ...st.locked.slice(idx + 1)\n        ]\n      }));\n    }\n  }\n\n  doScore(rulename, ruleFn) {\n    // evaluate this ruleFn with the dice and score this rulename\n    this.setState(st => ({\n      scores: { ...st.scores, [rulename]: ruleFn(this.state.dice) },\n      rollsLeft: NUM_ROLLS,\n      locked: Array(NUM_DICE).fill(false)\n    }));\n    this.roll();\n  }\n\n  render() {\n    return (\n      <div className='Game'>\n        <header className='Game-header'>\n          <h1 className='App-title'>Yahtzee!</h1>\n          <section className='Game-dice-section'>\n            <Dice\n              dice={this.state.dice}\n              locked={this.state.locked}\n              handleClick={this.toggleLocked}\n              rolling={this.state.shaking}\n            />\n            <div className='Game-button-wrapper'>\n              <button\n                className='Game-reroll'\n                disabled={this.state.locked.every(x => x) || this.state.rollsLeft === 0}\n                onClick={this.roll}\n              >\n                {this.state.rollsLeft} Rerolls Left\n              </button>\n            </div>\n          </section>\n        </header>\n        <ScoreTable doScore={this.doScore} scores={this.state.scores} />\n      </div>\n    );\n  }\n}\n\nexport default Game;\n"]},"metadata":{},"sourceType":"module"}